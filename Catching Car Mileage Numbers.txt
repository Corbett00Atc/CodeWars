/*
  "7777...8?!??!", exclaimed Bob, "I missed it again! Argh!" 
  Every time there's an interesting number coming up, he notices 
  and then promptly forgets. Who doesn't like catching those one-off 
  interesting mileage numbers?
  
  Let's make it so Bob never misses another interesting number. We've 
  hacked into his car's computer, and we have a box hooked up that reads 
  mileage numbers. We've got a box glued to his dash that lights up yellow 
  or green depending on whether it receives a 1 or a 2 (respectively).
  
  It's up to you, intrepid warrior, to glue the parts together. Write the 
  function that parses the mileage number input, and returns a 2 if the 
  number is "interesting" (see below), a 1 if an interesting number occurs 
  within the next two miles, or a 0 if the number is not interesting.
  
  Note: In Haskell, we use No, Almost and Yes instead of 0, 1 and 2.
  
  "Interesting" Numbers
  Interesting numbers are 3-or-more digit numbers that meet one or more of 
  the following criteria:
  
  Any digit followed by all zeros: 100, 90000
  Every digit is the same number: 1111
  The digits are sequential, incementing†: 1234
  The digits are sequential, decrementing‡: 4321
  The digits are a palindrome: 1221 or 73837
  The digits match one of the values in the awesomePhrases array
  † For incrementing sequences, 0 should come after 9, and not before 1, as in 7890.
  ‡ For decrementing sequences, 0 should come after 1, and not before 9, as in 3210.
  
  So, you should expect these inputs and outputs:
  
    // "boring" numbers
    Kata.IsInteresting(3, new List<int>() { 1337, 256 });    // 0
    Kata.IsInteresting(3236, new List<int>() { 1337, 256 });    // 0
    
    // progress as we near an "interesting" number
    Kata.IsInteresting(11207, new List<int>() { });   // 0
    Kata.IsInteresting(11208, new List<int>() { });   // 0
    Kata.IsInteresting(11209, new List<int>() { });   // 0
    Kata.IsInteresting(11210, new List<int>() { });   // 0
    Kata.IsInteresting(11211, new List<int>() { });   // 0
    
    // nearing a provided "awesome phrase"
    Kata.IsInteresting(1335, new List<int>() { 1337, 256 });   // 1
    Kata.IsInteresting(1336, new List<int>() { 1337, 256 });   // 1
    Kata.IsInteresting(1337, new List<int>() { 1337, 256 });   // 2
    
  Error Checking:
    - A number is only interesting if it is greater than 99!
    - Input will always be an integer greater than 0, and less than 1,000,000,000.
    - The awesomePhrases array will always be provided, and will always be an array, 
    - but may be empty. (Not everyone thinks numbers spell funny words...)
    - You should only ever output 0, 1, or 2.
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

public static class Kata
    {
        public static int IsInteresting(int number, List<int> awesomePhrases)
        {
            Console.WriteLine("\n\nNum: " + number);
            // return 1 if within two miles, return 2 if its' the number
            string numS0 = (number + 0).ToString();
            string numS1 = (number + 1).ToString();
            string numS2 = (number + 2).ToString();
            int num0 = number + 0;
            int num1 = number + 1;
            int num2 = number + 2;
            bool isInteresting = false;
            bool isClose = false;


            // initial error checking
            if (number < 98) { return 0; }
            else if (number == 99 || number == 98) { return 1; }

            // digit then all 0s
            if (Regex.IsMatch(numS0, @"^.(0*)$")) { isInteresting = true; }
            if (Regex.IsMatch(numS1, @"^.(0*)$")) { isClose = true; }
            if (Regex.IsMatch(numS2, @"^.(0*)$")) { isClose = true; }

            // all digits same number
            if (Regex.IsMatch(numS0, @"^" + numS0[0] + "*$")) { isInteresting = true; }
            if (Regex.IsMatch(numS1, @"^" + numS1[0] + "*$")) { isClose = true; }
            if (Regex.IsMatch(numS2, @"^" + numS2[0] + "*$")) { isClose = true; }

            // ascending number, ensure 0 comes after 9
            for (int i = 0; i < numS0.Length - 1; i++)
            {
                if (Char.GetNumericValue(numS0[i]) + 1 != Char.GetNumericValue(numS0[i + 1]))
                    if (!(Char.GetNumericValue(numS0[i]) == 9 && Char.GetNumericValue(numS0[i + 1]) == 0))
                      break;

                if (i == numS0.Length - 2)
                    isInteresting = true;
            }
            for (int i = 0; i < numS1.Length - 1; i++)
            {
                if (Char.GetNumericValue(numS1[i]) + 1 != Char.GetNumericValue(numS1[i + 1]))
                    if (!(Char.GetNumericValue(numS1[i]) == 9 && Char.GetNumericValue(numS1[i + 1]) == 0))
                      break;

                if (i == numS1.Length - 2)
                    isClose = true;
            }
            for (int i = 0; i < numS2.Length - 1; i++)
            {
                if (Char.GetNumericValue(numS2[i]) + 1 != Char.GetNumericValue(numS2[i + 1]))
                    if (!(Char.GetNumericValue(numS2[i]) == 9 && Char.GetNumericValue(numS2[i + 1]) == 0))
                      break;

                if (i == numS2.Length - 2)
                    isClose = true;
            }

            // descending number
            for (int i = 0; i < numS0.Length - 1; i++)
            {
                if (Char.GetNumericValue(numS0[i]) - 1 != Char.GetNumericValue(numS0[i + 1]))
                    break;
                else if (i == numS0.Length - 2)
                    isInteresting = true;
            }
            for (int i = 0; i < numS1.Length - 1; i++)
            {
                if (Char.GetNumericValue(numS1[i]) - 1 != Char.GetNumericValue(numS1[i + 1]))
                    break;
                else if (i == numS1.Length - 2)
                    isClose = true;
            }
            for (int i = 0; i < numS2.Length - 1; i++)
            {
                if (Char.GetNumericValue(numS2[i]) - 1 != Char.GetNumericValue(numS2[i + 1]))
                    break;
                else if (i == numS2.Length - 2)
                    isClose = true;
            }

            // palindrome
            if (numS0.Equals(new string(numS0.ToCharArray().Reverse().ToArray()))) { isInteresting = true; }
            if (numS1.Equals(new string(numS1.ToCharArray().Reverse().ToArray()))) { isClose = true; }
            if (numS2.Equals(new string(numS2.ToCharArray().Reverse().ToArray()))) { isClose = true; }

            // matches a number in awesomePhrases
            foreach (int n in awesomePhrases)
            {
                if (num0 == n) { isInteresting = true; }
                if (num1 == n || num2 == n) { isClose = true; }
            }

            // return based on priotity bool results 
            if (isInteresting) 
              return 2;
            else if (isClose) 
              return 1; 
            else 
              return 0; 
        }
    }