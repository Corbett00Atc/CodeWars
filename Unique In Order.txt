/*
	Implement the function unique_in_order which takes as argument a sequence and returns a list of items without 
	any elements with the same value next to each other and preserving the original order of elements.

	For example:

	// Note that you can return any data structure you want, as long it inherits the IEnumerable interface.
	UniqueInOrder("AAAABBBCCDAABBB")                     => "ABCDAB"
	UniqueInOrder("ABBCcAD")                             => "ABCcAD"
	UniqueInOrder("12233")                               => "123"
	UniqueInOrder(new List<double> {1.1, 2.2, 2.2, 3.3}) => new List<double> {1.1, 2.2, 3.3}
*/


using System.Collections.Generic;
using System;

public static class Kata
{
  public static IEnumerable<T> UniqueInOrder<T>(IEnumerable<T> iterable) 
  {
    // create list to process
    IEnumerator<T> items = iterable.GetEnumerator();
    List<T> processedList = new List<T>();
    
    // compare current value and previous value to not add duplicates in a row
    string lastAdded = "";
    while (items.MoveNext())
    {
        if (items.Current.ToString() != lastAdded.ToString())
        {
          lastAdded = items.Current.ToString();
          processedList.Add(items.Current);
        }
    }
    
    return processedList;
  }
}