/*
    Write a function called that takes a string of parentheses, 
    and determines if the order of the parentheses is valid. 
    The function should return true if the string is valid, 
    and false if it's invalid.
    
    Examples
    "()"              =>  true
    ")(()))"          =>  false
    "("               =>  false
    "(())((()())())"  =>  true
    Constraints
    0 <= input.length <= 100
    
    Along with opening (() and closing ()) parenthesis, input 
    may contain any valid ASCII characters. Furthermore, the input 
    string may be empty and/or not contain any parentheses at all. 
    Do not treat other forms of brackets as parentheses (e.g. [], {}, <>).
*/


using System;

public class Parentheses
{
    public static bool ValidParentheses(string input)
    {   
        // true because it's not a mismatch
        Console.WriteLine(input);
        if (input.Length == 0 || input == null) 
          return true;
          
        int remainingPar = 0;
        foreach (char p in input)
        {
          switch (p)
          {
            case '(': 
              remainingPar++;
              break;
            case ')':
              remainingPar--;
              break;
          }
          
          // bracketet structure has ')' before '('
          if (remainingPar < 0)
            return false;
        }
        
        return (remainingPar == 0) ? true : false;
    }
}